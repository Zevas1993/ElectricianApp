package com.example.electricianapp.data.model
import androidx.room.Entity
import androidx.room.Index
import androidx.room.PrimaryKey

/**
 * Represents a user in the local Room database.
 * Maps directly to the 'users' table.
 */
@Entity(
    tableName = "users",
    // Indices help Room enforce uniqueness constraints and speed up queries
    // based on these columns.
    indices = [
        Index(value = ["email"], unique = true),    // Ensure email is unique
        Index(value = ["authUid"], unique = true)  // Ensure Firebase UID is unique (if present)
    ]
)
data class UserEntity(
    /** Local database primary key, auto-generated by Room. */
    @PrimaryKey(autoGenerate = true)
    val id: Long = 0,

    /** Firebase Authentication User ID (UID). Nullable if the user signed up via
     *  a method not yet linked to Firebase (e.g., local password only initially)
     *  or if using non-Firebase auth. */
    val authUid: String?,

    /** User's email address. Marked as unique in the index. */
    val email: String,

    /** User's display name, potentially from Firebase profile or entered manually. */
    val username: String?,

    /** Placeholder for storing a securely hashed password if traditional
     *  username/password login is supported. Nullable for users signing in
     *  via OAuth providers like Google.
     *  **NEVER store plain text passwords.** */
    val passwordHash: String?
)
