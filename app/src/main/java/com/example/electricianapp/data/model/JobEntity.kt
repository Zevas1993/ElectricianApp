package com.example.electricianapp.data.model
import androidx.room.Entity
import androidx.room.ForeignKey
import androidx.room.Index
import androidx.room.PrimaryKey

/**
 * Enum defining the possible statuses for a Job.
 * These values will be stored as Strings in the database via a TypeConverter.
 */
enum class JobStatus {
    SCHEDULED,
    IN_PROGRESS,
    COMPLETED,
    CANCELLED
}

/**
 * Represents a job or work report in the local Room database.
 * Maps directly to the 'jobs' table.
 */
@Entity(
    tableName = "jobs",
    // Defines a foreign key relationship between the 'jobs' table and the 'users' table.
    foreignKeys = [
        ForeignKey(
            entity = UserEntity::class,       // The parent table (UserEntity maps to 'users')
            parentColumns = ["id"],           // The primary key column in the parent table ('users')
            childColumns = ["userId"],        // The foreign key column in this table ('jobs')
            onDelete = ForeignKey.CASCADE     // Rule: If a user is deleted, delete all their associated jobs.
            // Other options: SET_NULL (set userId to null), RESTRICT (prevent user deletion if jobs exist)
        )
    ],
    // Creates an index on the 'userId' column for faster lookups of jobs belonging to a specific user.
    indices = [Index("userId")]
)
data class JobEntity(
    /** Local database primary key, auto-generated by Room. */
    @PrimaryKey(autoGenerate = true)
    val id: Long = 0,

    /** Foreign key referencing the 'id' column of the 'users' table. */
    var userId: Long,

    /** A descriptive title for the job. */
    var title: String,

    /** Timestamp (milliseconds since epoch) indicating when the job was created or scheduled.
     *  Stored as Long, converted to/from Date object via TypeConverter. */
    var date: Long = System.currentTimeMillis(),

    /** The physical address or location of the job site (optional). */
    var siteAddress: String?,

    /** A more detailed description of the work involved (optional). */
    var description: String?,

    /** The current status of the job, using the JobStatus enum.
     *  Stored as String, converted via TypeConverter. Defaults to SCHEDULED. */
    var status: JobStatus = JobStatus.SCHEDULED
)
